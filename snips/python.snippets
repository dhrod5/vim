###########################################################################
#                            TEXTMATE SNIPPETS                            #
###########################################################################

#! header
snippet ifmain "ifmain" b
if __name__ == '__main__':
	${1:main()}$0
endsnippet


##########
# COMMON #
##########

# The smart def and smart class snippets use a global option called
# "g:ultisnips_python_style" which, if set to "doxygen" will use doxygen
# style comments in docstrings.

global !p

NORMAL  = 0x1
DOXYGEN = 0x2
SPHINX  = 0x3

def get_args(arglist):
    args = [arg.split('=')[0].strip() for arg in arglist.split(',') if arg]
    args = [arg for arg in args if arg and arg != "self"]

    return args


def get_style(snip):
    style = snip.opt("g:ultisnips_python_style", "normal")

    if    style == "doxygen": return DOXYGEN
    elif  style == "sphinx": return SPHINX
    else: return NORMAL


def format_arg(arg, style):
    if style == DOXYGEN:
        return "@param %s @todo" % arg
    elif style == SPHINX:
        return ":param %s: @todo" % arg
    elif style == NORMAL:
        return ":%s: @todo" % arg


def format_return(style):
    if style == DOXYGEN:
        return "@return: @todo"
    elif style in (NORMAL, SPHINX):
        return ":returns: @todo"


def write_docstring_args(args, snip):
    if not args:
        snip.rv += ' """'
        return

    snip.rv += '\n' + snip.mkline('', indent='')

    style = get_style(snip)

    for arg in args:
        snip += format_arg(arg, style)


def write_init_body(args, parents, snip):
    parents = [p.strip() for p in parents.split(",")]
    parents = [p for p in parents if p != 'object']

    for p in parents:
        snip += p + ".__init__(self)"

    if parents:
        snip.rv += '\n' + snip.mkline('', indent='')

    for arg in args:
        snip += "self._%s = %s" % (arg, arg)


def write_slots_args(args, snip):
    args = ['"%s"' % arg for arg in args]
    snip += '__slots__ = (%s,)' % ', '.join(args)

endglobal

########################################
# Class & Special Method Name Snippets #
########################################

snippet cl "class with docstrings" b
class ${1:MyClass}(${2:object}):
	"""
	${3:Docstring for $1 }
	"""

	def __init__(self$4):
		"""
		${5:@todo: to be defined}`!p
snip.rv = ""
snip >> 2

args = get_args(t[4])

write_docstring_args(args, snip)
if args:
    snip.rv += '\n' + snip.mkline('', indent='')
    snip += '"""'

write_init_body(args, t[2], snip)
`
		$0
endsnippet

###
# Short cuts for imports
###
snippet f "from module import name" b
from ${1:module} import ${2:Stuff}
endsnippet

snippet i "import module" b
import ${1:module} as ${2:$1}
endsnippet



##############
# PROPERTIES #
##############
snippet prop "Read Only Property" b
@property
def ${1:property}(self):
	${2:return self._$1}$0
endsnippet

##########################
# Try / Except / Finally #
##########################

# simple shortcut just for try
snippet t "Try / Except" b
try:
	${1:pass}
except ${2:Exception}, ${3:e}:
	${4:raise $3}
endsnippet

##########################
# If/Else/Elif 
##########################

# simple shortcut just for try
snippet if "If" b
if ${1:True}:
	${2:pass}
endsnippet

snippet iff "If / Else" b
if ${1:True}:
	${2:pass}
elif:
	${4:pass}
endsnippet

snippet iff "If / Elif" b
if ${1:True}:
	${2:pass}
elif ${3:True}:
	${4:pass}
endsnippet

snippet iff "If / Elif/ Else" b
if ${1:True}:
	${2:pass}
elif ${3:True}:
	${4:pass}
else:
	${6:pass}
endsnippet


###
# For making test classes
###
snippet test "pyunit testcase" b
class Test${1:Class}(${2:unittest.TestCase}):
	"""
	${3:Test case docstring}
	"""

	def setUp(self):
		${4:pass}

	def tearDown(self):
		${5:pass}

	def test_${6:name}(self):
		${7:pass}
endsnippet

# vim:ft=snippets:
